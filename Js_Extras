::::::::::::::::::::::::::::::::::::::::::::::::: Modules :::::::::::::::::::::::::::::::::::::::::::::::::::

  - Use type ="module" attribute in the head script tag
  - Use export and import {ClassName} from 'relativepath'
  - globalThis alternate for this or window obj
  - import Name{Names} from 'relativePath' -> for default export's
  
ESlint::
  
  - Install using npm as devDependencies
  - Configure using ctrl + shift + p and select the configure file
  - Change the settings using json file
  
::::::::::::::::::::::::::::::::::::::::::::::::: Webpack :::::::::::::::::::::::::::::::::::::::::::::::::::
  
  - Used for bundling all files
  
::::::::::::::::::::::::::::::::::::::::::::::::: Browser Storage :::::::::::::::::::::::::::::::::::::::::::::::::::
  
  - localStorage(stored until cleared)
  - sessionStorage(stored until page closes) => key and value pairs, only js can use   
      
      localStorage.getItem('key') -> JSON.parse if object retireval
      localStorage.setItem('key','value') -> JSON.stringify if object storing
      Same for sessions.
  
  - cookies => same as local but difference is they are sent to server all the time
    
     document.cookie - Get all cookie values or not
     doucment.cookie = `key=${value}`;
     doucment.cookie = `key=${value}; max-age=2` => expires after 2 secs
      Can split the string with ; and use as array, also split with '=' to get the key and values
     Can be set to expire
        
  - IndexedDB => a normal database can have complex data 
      
Browser Support::
  
  - core-js => bunch of polyfills that can be used
  
  - nomodule script tag for fallback 
  
  - <noscript>javascript not enabled</noscript>
  
  Polyfill
   
    - Build the updated stuffs using old workaround (promises can be done using callback)(fetch can be done using XHR)
    
  Transpiling(babel)
  
   - New code to old code
   
::::::::::::::::::::::::::::::::::::::::::: AJAX :::::::::::::::::::::::::::::::::::::::::::::::::::

  - (FetchApi, Axios, JQuery, NodeHttp)
  - Asynchronous Javascript And XML
  - Asynchronous data transfer between req and res
  - Updates without reploading the page
  - Uses XmlHttpRequest Object to implement Ajax
  - Provided by browsers, api in form an object
  - const xhr = new XmlHttpRequest();
    xhr.open('GET', "data.txt" or url, true);
    xhr.onload = () => {if(xhr.status == 200) log(xhr.responseText)}
    xhr.send();
  - readyState code::
      - 0 : request not intialized
      - 1 : server connection established
      - 2 : request received
      - 3 : processing request (onprogress) loader/spinner
      - 4 : request finished and response ready (onload)
      - onerror
      
::::::::::::::::::::::::::::::::::::::::::::::::: API :::::::::::::::::::::::::::::::::::::::::::::::::::

  - Application Programming Interface 
  - Structured req and res
  
::::::::::::::::::::::::::::::::::::::::::::::::: Regex :::::::::::::::::::::::::::::::::::::::::::::::::

  - new RegExp();
  - starts and ends with '/'
    let ex = /hello/
  
  Flags::
  
  - /hello/i => makes it case insensitive
    /hello/g => makes it global matching
    
  Methods::
  
  - ex.exec('hellowolrd') - Returns the index in array or null
  - ex.test('phrase') - tests and returns true or false
  - phrase.match(ex) - same like exec but opp
  - phrase.search(ex) - returns the index of the match else -1
  - phrase.replace(ex, 'newPhrase') - returns string with replaced value
  
  Symbols::
  
   - ^ => anything that starts with => /^h/
   - $ => anything that ends with => /world$/
   - both in exp => /^hello$/ must start with hello and end with hello
   - . => matches any one char
   - * => matches any 0 or more times
   - ? => optional char => /gre?a?y/ =>  e or a or none
   - + => one or more
  
  Brackets::
  
   - [] used for char set => /gr[ea]y/ => must be a or e
   - [^] used for exception => /[^gf]ray/ => must not be g or f
   - [s-e] used for range => /[A-Z]ray/ => anything in that range
   
   - {m} used to count the number of ele => /re{2}g/ => 2 e are allowed
                                         => /re{2,4}g/ => 2 to 4 e are allowed 
                                         => /re{2,}g/ => atleast 2 times
   - () used for grouping.
   
  Shorthand::
  
   - \w => word char or _
   - \W => non-word char
   - \d => any digit
   - \D => any non-digit
   - \s => any space
   - \S => any non space
   - /hell\b/ => word boundary(onyl that word) hello wont pass
   
  Assertions::
  
   - /s(?=y)/ => s followed by y
   - /s(?!y)/ => s not followed by y
   
 ::::::::::::::::::::::::::::::::::: Design Patterns :::::::::::::::::::::::::::::::::::
 
    - Structured and Standard way of writing code specific to language specification
    - List:: 
      
      - Module
      - Revealing Module Pattern => Using IIFE function and returning objects to make it private and public
      - Singleton => Same IIFE but create a func to create instance and check for valid instance else create only once
      - Factory => Create seperate constructors and a common subclass to create object props
      - Observer =>   
      - Mediator
      - State
      
    - 
