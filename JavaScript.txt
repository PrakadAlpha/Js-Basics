Array.prototype.includes()

	indexOf() -returns -1 if element not there..
	
padStart() and padEnd()

	padStart(targetLength [, padString])
	padEnd(targetLength [, padString])
	
Object.values() - returns values also works with array

Object.entries() - returns with the key value also works with array

Object.getOwnPropertyDescriptors(obj) - accepts an object and returns an object with the set of descriptors

Object.assign() -- combine the objects together to return a single object

Object.getPrototypeOf(new Object() -- To get the prototype of the object

isPrototypeOf() -- You can check the prototype of an object using this method

Arrays::
	
	a.length
	a.every(f()) -- Iterates a until f() returns false
	a.some(f()) -- Iterates a until f() returns true
	a.map(fun()) -- builds a new array according to the request
	a.filter(fun()) -- builds a new array with according to changes with the filter function
	a.reduce((accumulator, currentValue, currentIndex, array) => {}, initialValue) 
			-- reduce() executes a callback function on all the items of the array and allows to progressively compute a result. If initialValue is specified, accumulator in the first iteration will equal to that value.
	a.forEach(f()) -- Iterates f on a without a way to stop
	
	Iterators::
		
		.entries() -- returns an iterator of key/value pairs
		.keys() -- allows to iterate on the keys
		.next() -- returns undefined when the array ends. You can also detect if the iteration ended by looking at it.next() which returns a value, done pair.
				   done is 	always false until the last element, which returns true
	
	Adding::
		
		a.push(4) -- Adding to the end of an array
		a.unshift(0)-- Adding at the beginning of an array

	Removing::
		
		a.pop() -- From the end 
		a.shift() -- From the beginning
		a.splice(index, startValue) -- Removes the specified values
			ex: a.splice(2, 3, 2, 'a', 'b') //removes 3 items starting from...index 2, and adds 2 items..still starting from index 2
	Joining::
		
		a.concat(b);
	
	Looking::
	
		a.indexOf() -- Returns the index of the first matching item found, or -1 if not found
		a.lastIndexOf() -- Returns the index of the last matching item found, or -1 if not found

	a.find(x => x.id === my_id) -- Will return the first element in the array that has id === my_id.
	a.findIndex()-- Returns the index of the first item that returns true, and if not found, it returns undefined
	a.includes(value, i) -- Returns true if the array contains the value after the index
	a.slice() -- Getting a portion of array
	a.sort() --ASCII(0-9A-Za-z) 
	a.reverse()
	a.toString -- Returns string expression of the array
	a.join(,) -- Returns a string concatenation of the array elements. Pass a parameter to add a custom separator
	
	
	Copy an exsisting array by value -- const b = Array.from(a) :: const b = Array.of(...a)
	
	Copy Within the array::
	const a = [1, 2, 3, 4]
	a.copyWithin(0, 2) // [3, 4, 3, 4]
	const b = [1, 2, 3, 4, 5]
	b.copyWithin(0, 2) // [3, 4, 5, 4, 5]
	//0 is where to start copying into,
	// 2 is where to start copying from
	const c = [1, 2, 3, 4, 5]
	c.copyWithin(0, 2, 4) // [3, 4, 3, 4, 5]
	//4  is an end index
	
	