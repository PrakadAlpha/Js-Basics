Modules::

  - Use type ="module" attribute in the head script tag
  - Use export and import {ClassName} from 'relativepath'
  - globalThis alternate for this or window obj
  - import Name{Names} from 'relativePath' -> for default export's
  
ESlint::
  
  - Install using npm as devDependencies
  - Configure using ctrl + shift + p and select the configure file
  - Change the settings using json file
  
Webpack::
  
  - Used for bundling all files
  
Browser Storage::
  
  - localStorage(stored until cleared)
  - sessionStorage(stored until page closes) => key and value pairs, only js can use   
      
      localStorage.getItem('key') -> JSON.parse if object retireval
      localStorage.setItem('key','value') -> JSON.stringify if object storing
      Same for sessions.
  
  - cookies => same as local but difference is they are sent to server all the time
    
     document.cookie - Get all cookie values or not
     doucment.cookie = `key=${value}`;
     doucment.cookie = `key=${value}; max-age=2` => expires after 2 secs
      Can split the string with ; and use as array, also split with '=' to get the key and values
     Can be set to expire
        
  - IndexedDB => a normal database can have complex data 
      
Browser Support::
  
  - core-js => bunch of polyfills that can be used
  
  - nomodule script tag for fallback 
  
  - <noscript>javascript not enabled</noscript>
  
  Polyfill
   
    - Build the updated stuffs using old workaround (promises can be done using callback)(fetch can be done using XHR)
    
  Transpiling(babel)
  
   - New code to old code
   
AJAX::(FetchApi, Axios, JQuery, NodeHttp)

  - Asynchronous Javascript And XML
  - Asynchronous data transfer between req and res
  - Updates without reploading the page
  - Uses XmlHttpRequest Object to implement Ajax
  - Provided by browsers, api in form an object
  - const xhr = new XmlHttpRequest();
    xhr.open('GET', "data.txt" or url, true);
    xhr.onload = () => {if(xhr.status == 200) log(xhr.responseText)}
    xhr.send();
  - readyState code::
      - 0 : request not intialized
      - 1 : server connection established
      - 2 : request received
      - 3 : processing request (onprogress) loader/spinner
      - 4 : request finished and response ready (onload)
      - onerror
      
API:: Application Programming Interface

  - Structured req and res
  
    
  
