::::::::::::::::::::: Basics :::::::::::::::::::::

Javascript is Case Sensitive
		   is Dynamically Typed
		   is Single Threaded
		 
		 Javascript Code 
		 	|
		 Javascript Engine (V8, SpiderMonkey) 
		 	|
	  	    On webpage (parse Code -> Compile to Machine Code -> Execute Machine Code)
		   
:::::::::::::::::::::::::::::::::::::: Tips & Tricks ::::::::::::::::::::::::::::::::::::::

	logical OR (||) => Can be used to set default values  (truthy or falsy || default value)
	logical AND (&&) => Can be used as conditional checker (check && statement)
		   
:::::::::::::::::::Datatypes::::::::::::::::::: 

Primitive(stack):-

	String
	Boolean
	Number
	Null(object - typeof)
	Undefined
	Symbol

Reference types(heap):-

	BigInt
	Arrays(object - typeof)
	Objects
	Functions
	Date
	(All others)
	
Type coersion happens when two different datatypes are manipulated together

:::::::::::::::::::Console Tricks:::::::::::::::::::::::::::::::::

console.dir(document);
console.table
console.error
console.warn
console.clear

console.time() --> Do something --> console.timeEnd() => return the time it took to run the Do something 


::::::::::::::::::::: Var -- Let -- Const :::::::::::::::::::::

Returns undefined if not initialized.

Var -- Function scoped, Hoisting returns undefined(even initialized)
Let -- Block Scoped{}, Hoisting returns reference error
Const- Values dont change, same as hoisting in Let

::::::::::::::::::: String Methods :::::::::::::::::::
 
toString() - Convert to string
Concat     - + ' ' +
Append     - += 
length     - length of string
toUpperCase()
toLowerCase()
indexOf()
lasIndexOf()
charAt()
substring(start index, number of letters)
slice(-negative) - Same as substring but, -ve Starts from last
split(' ') 
replace(this,with this)
includes() - if inside string

::::::::::::::::::: Number Methods :::::::::::::::::::

toFixed() - Returns number with decimals
parseInt(), parseFloat() - String to Number


NaN - Indicates it is not a number

::::::::::::::::::: Literals :::::::::::::::::::

Template Literals :-

 ` ` - Can use in different lines 
 ${variables} - used to parse vars in the template literals  //Like a console log

Object Literals :- 

	Can have anything objects, functions

	const lit = {key : value, ..}

Number Literals:-
	
decimal - Without a leading 0
Octal   - Leading 0o (or 0O) -> (0 - 7)
Hexa    - A leading 0x (or 0X) ->  (0–9)(A–F)
Binary  - A leading 0b (or 0B) -> (0 or 1)



::::::::::::::::::: Math Lib :::::::::::::::::::

Math.PI
Math.round()
Math.ceil()
Math.floor()
Math.sqrt()
Math.abs()
Math.pow()
Math.min()
Math.max()

Random ::

	Math.random() 
	Math.random() * 20 -> Range  1 - 19
	
::::::::::::::::::: Math Lib :::::::::::::::::::

	const date = new Date();
	
	date.getMonth() -It is 0 based
	date.getDay()
	date.getYear()
	date.getMinutes()
	date.getSeconds()
	date.getFullYear()
	date.getTime()
	
	Also same with set**()
	
::::::::::::::::::::: Operators :::::::::::::::::::::

typeof  - Returns Datatype

strict equals and not equals  ===  and !== -> Also compares the datatype along with the value

Others as same as in other languages..

::::::::::::::::::::::: Arrays :::::::::::::::::::::


Declaration:-
	
	var a = [];
		a = [];
		a = new Array();

Methods:-
	
	indexOf()    - returns -1 if element not there..
	a.length     - returns length
	a.isArray()  - returns boolean
	a.every(f()) -- Iterates a until f() returns false
	a.some(f())  -- Iterates a until f() returns true

			
	.entries() 		 -- returns an iterator of key/value pairs
	.keys() 		 -- allows to iterate on the keys
	.next() 		 -- returns undefined when the array ends. You can also detect if the iteration ended by looking at it.next() which returns a value, done pair.
			   done is 	always false until the last element, which returns true
	
	Adding::
		
		a.push(4) -- Adding to the end of an array
		a.unshift(0)-- Adding at the beginning of an array

	Removing::
		
		a.pop() -- From the end 
		a.shift() -- From the beginning
		a.splice(index, startValue) -- Removes the specified values
			ex: a.splice(2, 3, 2, 'a', 'b') //removes 3 items starting from...index 2, and adds 2 items..starting from index 2
	Joining::
		
		a.concat(b);
	
	Looking::
	
		a.indexOf() -- Returns the index of the first matching item found, or -1 if not found
		a.lastIndexOf() -- Returns the index of the last matching item found, or -1 if not found

	a.find(x => x.id === my_id) -- Will return the first element in the array that has id === my_id (Like lamba expressions returns based on condition in function)
	a.findIndex()				-- Returns the index of the first item that returns true, and if not found, it returns undefined
	a.includes(value, i) 		-- Returns true if the array contains the value after the index
	a.slice() 					-- Getting a portion of array
	a.sort() 					-- ASCII(0-9A-Za-z) (sorts onyl the first number based so need to use a comparator)
	a.reverse()
	a.toString 					-- Returns string expression of the array
	a.join(,) 					-- Returns a string concatenation of the array elements. Pass a parameter to add a custom separator
	a.concat(a2)                -- Returns a concatinated two arrays
	
	Copy an exsisting array by value -- const b = Array.from(a) :: const b = Array.of(...a)
	
	Copy Within the array::
	const a = [1, 2, 3, 4]
	a.copyWithin(0, 2) // [3, 4, 3, 4]
	const b = [1, 2, 3, 4, 5]
	b.copyWithin(0, 2) // [3, 4, 5, 4, 5]
	//0 is where to start copying into,
	// 2 is where to start copying from
	const c = [1, 2, 3, 4, 5]
	c.copyWithin(0, 2, 4) // [3, 4, 3, 4, 5]
	//4  is an end index

::::::::::::::::::::::::: Functions :::::::::::::::::::::::

Decalaration :-
	
	function(){return x}
	
Expression:-

	const name = function optional() {return x};

Immidiatley Invokable Function Expression (IIFE):-

	- Decalared and ran at the same time

	(function(){
		
		log(x);
		
	})(x);

Methods:- 
	
	- Functions used in object literals are methods
	
	const todo = {
		add: function(){x};	
	}
	
	todo.add();
	
::::::::::::::::::::::: Loops :::::::::::::::::::::::

	for(x of array) - Used for Arrays
	for(x in map) - Used for Objects
	a.forEach(f(current, index, array)) 	 -- Iterates f on a without a way to stop		
	a.map(fun())   	 -- builds a new array according to the request
	a.filter(fun())	 -- builds a new array with according to changes with the filter function
	a.reduce((accumulator, currentValue, currentIndex, array) => {}, initialValue) 
			-- reduce() executes a callback function on all the items of the array and allows to progressively compute a result. If initialValue is specified, accumulator in the first iteration will equal to that value.
	

::::::::::::::::::::::::: Objects :::::::::::::::::::::::::
	
	Var o = new Object();
		o = {};
		
	Accessed using Dot(.) Operator -- a.prop

::::::::::::::::::::::: Methods :::::::::::::::::::::::

Array.prototype.includes()

padStart() and padEnd()

	padStart(targetLength [, padString])
	padEnd(targetLength [, padString])
	
Object.values() - returns values also works with array

Object.entries() - returns with the key value also works with array

Object.getOwnPropertyDescriptors(obj) - accepts an object and returns an object with the set of descriptors

Object.assign() -- combine the objects together to return a single object

Object.getPrototypeOf(new Object() -- To get the prototype of the object

isPrototypeOf() -- You can check the prototype of an object using this method


